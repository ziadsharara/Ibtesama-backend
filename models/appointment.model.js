import mongoose from 'mongoose';

// Create appointment schema
const appointmentSchema = new mongoose.Schema(
  {
    // We will use a string for the patient for now
    // patient: {
    //   type: mongoose.Schema.Types.ObjectId,
    //   ref: "Patient",
    //   required: true,
    // },
    patient: {
      type: String,
      required: false,
    },

    // We will use a string for the patient for now
    // doctor: {
    //   type: mongoose.Schema.Types.ObjectId,
    //   ref: "Doctor",
    //   required: true,
    // },
    doctor: {
      type: String,
      required: false,
    },

    date: {
      type: Date,
      required: true,
    },
    startTime: {
      type: String, // Format: 'HH:MM'
      required: false,
    },
    endTime: {
      type: String, // Format: 'HH:MM'
      required: false,
    },

    status: {
      type: String,
      enum: ['pending' | 'inProgress' | 'finished' | 'cancelled'],
      default: 'pending',
      required: true,
    },

    chiefComplaint: {
      type: String,
      required: false,
    },
    diagnosis: {
      type: String,
      required: false,
    },

    workToBeDone: [String],
    workDone: [String],
    prescribedMeds: [String],

    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },

    notes: [
      {
        note: String,
        createdAt: {
          type: Date,
          default: Date.now,
        },
      },
    ],
  },
  { timestamps: true, toJSON: { virtuals: true }, toObject: { virtuals: true } }
);

// Compute status to make it dynamic
// Code generated by GPT ðŸ¤«
appointmentSchema.virtual('duration').get(function () {
  if (!this.startTime || !this.endTime) return null;

  const [startHour, startMinute] = this.startTime.split(':').map(Number);
  const [endHour, endMinute] = this.endTime.split(':').map(Number);

  const start = startHour * 60 + startMinute;
  const end = endHour * 60 + endMinute;

  return `${end - start} minutes`;
});
