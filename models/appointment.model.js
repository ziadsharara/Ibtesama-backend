import mongoose from 'mongoose';

// Create note schema
const noteSchema = new mongoose.Schema(
  {
    note: { type: String, required: true },
  },
  { timestamps: true }
);

// Create appointment schema
const appointmentSchema = new mongoose.Schema(
  {
    // Will be added when Auth and User Roles are implemented
    // patient: {
    //   type: mongoose.Schema.Types.ObjectId,
    //   ref: "Patient",
    //   required: true,
    // },

    patient: {
      type: String,
      required: true,
    },

    // Will be added when Auth and User Roles are implemented
    // doctor: {
    //   type: mongoose.Schema.Types.ObjectId,
    //   ref: "Doctor",
    //   required: true,
    // },

    doctor: {
      type: String,
      required: true,
    },

    date: {
      type: Date,
      required: true,
    },
    startTime: {
      type: String,
      // Code generated by GPT ðŸ¤«
      validate: {
        validator: v => !v || /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),
        message: props => `${props.value} is not a valid time!`,
      },
      required: false,
    },
    endTime: {
      type: String,
      // Code generated by GPT ðŸ¤«
      validate: {
        validator: v => !v || /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v),
        message: props => `${props.value} is not a valid time!`,
      },
      required: false,
    },

    status: {
      type: String,
      enum: ['pending', 'inProgress', 'finished', 'cancelled'],
      default: 'pending',
      required: true,
    },

    chiefComplaint: {
      type: String,
      required: false,
    },
    diagnosis: {
      type: String,
      required: false,
    },

    workToBeDone: {
      type: [String],
      required: false,
    },
    workDone: {
      type: [String],
      required: false,
    },
    prescribedMeds: {
      type: [String],
      required: false,
    },

    // Will be added when Auth and User Roles are implemented
    // createdBy: {
    //   type: mongoose.Schema.Types.ObjectId,
    //   ref: 'User',
    //   required: true,
    // },

    notes: { type: [noteSchema], required: false },
  },
  { timestamps: true, toJSON: { virtuals: true }, toObject: { virtuals: true } }
);

// Compute status to make it dynamic
// Code generated by GPT ðŸ¤«
appointmentSchema.virtual('duration').get(function () {
  if (!this.startTime || !this.endTime) return null;

  const [startHour, startMinute] = this.startTime.split(':').map(Number);
  const [endHour, endMinute] = this.endTime.split(':').map(Number);

  const start = startHour * 60 + startMinute;
  const end = endHour * 60 + endMinute;

  const duration = end - start;
  return duration >= 0 ? duration : null;
});
